#include <stdbool.h>
#include <stdint.h>
#include "inc/tm4c1294ncpdt.h"

int leerTeclado1();
int abrocierro();
int abrir();
int cerrar();
void Delay(unsigned long counter); // used to add delay
void HC05_init(void); // Initialize UART5 module for HC-05
char Bluetooth_Read(void); //Read data from Rx5 pin of TM4C123
void Bluetooth_Write(unsigned char data); // Transmit a character to HC-05 over Tx5 pin
void Bluetooth_Write_String(char *str); // Transmit a string to HC-05 over Tx5 pin

int t,control,conde;
int cierre,aper;
int estat;
int main(void)
{
    aper=0;
    cierre=0;
    SYSCTL_RCGCGPIO_R |= 0X2E38;
    while( (SYSCTL_PRGPIO_R & 0X2E38) ==0);

    GPIO_PORTE_AHB_DIR_R = 0X0F;
    GPIO_PORTE_AHB_DEN_R = 0X0F;
    GPIO_PORTD_AHB_DIR_R |= 0x00;
    GPIO_PORTD_AHB_DEN_R |= 0x03;
    GPIO_PORTF_AHB_DEN_R = 0X0F;
    GPIO_PORTF_AHB_DIR_R = 0X0F;
    //Se configuran los pines para las entradas desde el teclado
    GPIO_PORTL_DIR_R = 0X00;
    GPIO_PORTL_DEN_R = 0X0F;
    GPIO_PORTP_DIR_R = 0X00;
    GPIO_PORTP_DEN_R = 0X03;
    GPIO_PORTL_PDR_R = 0X03;

    GPIO_PORTM_DIR_R = 0X03;
    GPIO_PORTM_DEN_R = 0X03;

    //uso de blue
    //GPIO_PORTK_DIR_R |= 0X03;
    //GPIO_PORTK_DEN_R = 0X03;

    GPIO_PORTM_DIR_R = 0X03;
    GPIO_PORTM_DEN_R = 0X03;

    //Bluu

   //Cambiar de 0 o 1


     int x=0;
    HC05_init();

while(x==1){
    leerTeclado1();
}

while(x==0){
        char c = Bluetooth_Read();
        //leerTeclado1();

        if( c=='C'){
                   //GPIO_PORTF_AHB_DATA_R   |=(1<<0); //GPIO_PORTN_DATA_R  |=(1<<0); //GPIO_PORTF_AHB_DATA_R   |=(1<<0);
                   Bluetooth_Write_String("CERRANDO\n");
                  abrir();
                }
                else if( c=='A'){
                    //GPIO_PORTF_AHB_DATA_R  &=~(1<<0); //GPIO_PORTN_DATA_R  &=~(1<<0);//GPIO_PORTF_AHB_DATA_R  &=~(1<<0);
                    Bluetooth_Write_String("ABRIENDO\n");
                    cerrar();
                                                       }
                else if( c=='E'){
                     Bluetooth_Write_String("Comprobando\n");
                     estado();

            }



    //leerTeclado1();



    //return 0;

}
}

int Teclado(){
    conde=0;
    leerTeclado1();
    conde=conde+control;
    leerTeclado1();
    conde=conde+control;
    leerTeclado1();
   conde=conde+control;
   leerTeclado1();
   conde=conde+control;
   if (conde==31){
       abrocierro();
   }

}

int abrocierro(){
    leerTeclado1();
    if (control==4){
    abrir();}
    if (control==12){
       cerrar();}
}

int abrir(){
    cierre= GPIO_PORTD_AHB_DATA_R;
       if (cierre==1){
       GPIO_PORTM_DATA_R=0X01;
       aper=GPIO_PORTP_DATA_R;
       while (aper==0){
       aper=GPIO_PORTP_DATA_R;
       GPIO_PORTM_DATA_R=0X01;
       }
       GPIO_PORTM_DATA_R=0x00;


}}

int cerrar(){
        aper= GPIO_PORTP_DATA_R;
        if (aper==1){
         cierre=GPIO_PORTD_AHB_DATA_R;
        while (cierre==0){
        cierre=GPIO_PORTD_AHB_DATA_R;
        GPIO_PORTM_DATA_R=0x02;
    }
        GPIO_PORTM_DATA_R=0x00;

    }}

int estado(){

aper= GPIO_PORTP_DATA_R;
cierre=GPIO_PORTD_AHB_DATA_R;
if (aper==1){
estat=1;
Bluetooth_Write_String("Cerrado\n");
}else if(cierre==1){
estat=2;
Bluetooth_Write_String("Abierto\n");
}else if (cierre==aper){
estat=3;
}
}





int leerTeclado1()
{
    GPIO_PORTF_AHB_DATA_R = 0x00;
    int lect;
    int t;
    int control=0;
    for(;;)
    {
    GPIO_PORTE_AHB_DATA_R = 0x08;
    lect = GPIO_PORTL_DATA_R;
            if (lect == 1)
            {
              GPIO_PORTF_AHB_DATA_R = 6;
              abrir();
              for(t=0 ; t<1000000 ; t++);
              GPIO_PORTF_AHB_DATA_R = 0;
              control= 4;
            }

            if (lect == 2)
            {
                GPIO_PORTF_AHB_DATA_R = 2;
                for(t=0 ; t<10000 ; t++);
                GPIO_PORTF_AHB_DATA_R = 0;
                cierre= GPIO_PORTD_AHB_DATA_R;
               if (cierre==1){
               GPIO_PORTM_DATA_R=0X01;
               aper=GPIO_PORTP_DATA_R;
               while (aper==0){
               aper=GPIO_PORTP_DATA_R;
               GPIO_PORTM_DATA_R=0X01;
               }
               GPIO_PORTM_DATA_R=0x00;
               }
                control= 3;
            }

            if (lect == 4)
            {
                GPIO_PORTF_AHB_DATA_R = 6;
                for(t=0 ; t<1000000 ; t++);
                GPIO_PORTF_AHB_DATA_R = 0;
                control= 2;
            }
            if (lect == 8)
            {
                GPIO_PORTF_AHB_DATA_R = 2;
                for(t=0 ; t<10000 ; t++);
                GPIO_PORTF_AHB_DATA_R = 0;
                cierre= GPIO_PORTD_AHB_DATA_R;
               if (cierre==1){
               GPIO_PORTM_DATA_R=0X01;
               aper=GPIO_PORTP_DATA_R;
               while (aper==0){
               aper=GPIO_PORTP_DATA_R;
               GPIO_PORTM_DATA_R=0X01;
               }
               GPIO_PORTM_DATA_R=0x00;
               }
                control= 1;
            }

            GPIO_PORTE_AHB_DATA_R = 0x04;
            lect = GPIO_PORTL_DATA_R;
            if (lect == 1)
                        {
                GPIO_PORTF_AHB_DATA_R = 6;
                          for(t=0 ; t<1000000 ; t++);
                          GPIO_PORTF_AHB_DATA_R = 0;
                          control= 8;
                        }

                        if (lect == 2)
                        {
                            GPIO_PORTF_AHB_DATA_R = 2;
                            for(t=0 ; t<1000000 ; t++);
                            GPIO_PORTF_AHB_DATA_R = 0;
                            aper= GPIO_PORTP_DATA_R;
                          if (aper==1){
                              GPIO_PORTM_DATA_R=0X02;
                           cierre=GPIO_PORTD_AHB_DATA_R;
                          while (cierre==0){
                          cierre=GPIO_PORTD_AHB_DATA_R;
                          GPIO_PORTM_DATA_R=0x02;
                      }
                          GPIO_PORTM_DATA_R=0x00;
                          }
                            control= 7;
                        }

                        if (lect == 4)
                        {
                            GPIO_PORTF_AHB_DATA_R = 6;
                            for(t=0 ; t<1000000 ; t++);
                            GPIO_PORTF_AHB_DATA_R = 0;

                            control= 6;
                        }
                        if (lect == 8)
                        {
                            GPIO_PORTF_AHB_DATA_R = 2;
                            for(t=0 ; t<1000000 ; t++);
                            GPIO_PORTF_AHB_DATA_R = 0;
                            aper= GPIO_PORTP_DATA_R;
                                                      if (aper==1){
                                                          GPIO_PORTM_DATA_R=0X02;
                                                       cierre=GPIO_PORTD_AHB_DATA_R;
                                                      while (cierre==0){
                                                      cierre=GPIO_PORTD_AHB_DATA_R;
                                                      GPIO_PORTM_DATA_R=0x02;
                                                  }
                                                      GPIO_PORTM_DATA_R=0x00;
                                                      }
                            control= 5;
                        }
            GPIO_PORTE_AHB_DATA_R = 0x02;
            lect = GPIO_PORTL_DATA_R;
            if (lect == 1)
                        {
                GPIO_PORTF_AHB_DATA_R = 6;
                          for(t=0 ; t<1000000 ; t++);
                          GPIO_PORTF_AHB_DATA_R = 0;
                          control= 12;
                        }

                        if (lect == 2)
                        {
                            GPIO_PORTF_AHB_DATA_R= 2;
                            for(t=0 ; t<1000000 ; t++);
                            GPIO_PORTF_AHB_DATA_R = 0;
                            control= 11;
                        }

                        if (lect == 4)
                        {
                            GPIO_PORTF_AHB_DATA_R = 6;
                            for(t=0 ; t<1000000 ; t++);
                            GPIO_PORTF_AHB_DATA_R = 0;
                            control= 10;
                        }
                        if (lect == 8)
                        {
                            GPIO_PORTF_AHB_DATA_R = 2;
                            for(t=0 ; t<1000000 ; t++);
                            GPIO_PORTF_AHB_DATA_R = 0;
                            control= 9;
                        }

            GPIO_PORTE_AHB_DATA_R = 0x01;
            lect = GPIO_PORTL_DATA_R;
            if (lect == 1)
                        {
                GPIO_PORTF_AHB_DATA_R = 6;
                          for(t=0 ; t<1000000 ; t++);
                          GPIO_PORTF_AHB_DATA_R = 0;
                          control= 16;
                        }

                        if (lect == 2)
                        {
                            GPIO_PORTF_AHB_DATA_R = 2;
                            for(t=0 ; t<1000000 ; t++);
                            GPIO_PORTF_AHB_DATA_R= 0;
                            control= 15;
                        }

                        if (lect == 4)
                        {
                            GPIO_PORTF_AHB_DATA_R = 6;
                            for(t=0 ; t<1000000 ; t++);
                            GPIO_PORTF_AHB_DATA_R = 0;
                            control= 14;
                        }
                        if (lect == 8)
                        {
                            GPIO_PORTF_AHB_DATA_R = 2;
                            for(t=0 ; t<1000000 ; t++);
                            GPIO_PORTF_AHB_DATA_R = 0;
                            control= 13;
                        }
       }
}



void HC05_init(void)
{


    SYSCTL_RCGCUART_R |= 0x10;  /* enable clock to UART4 */
    SYSCTL_RCGCGPIO_R |= 0x200;  /* enable clock to PORTK for PK0/Rx and RK1/Tx */
    Delay(1);
    /* UART0 initialization */
            UART4_CTL_R = 0;         /* UART4 module disable */
           UART4_IBRD_R = 104;      /* for 9600 baud rate, integer = 104 */
           UART4_FBRD_R = 11;       /* for 9600 baud rate, fractional = 11*/
           UART4_CC_R = 0;          /*select system clock*/
           UART4_LCRH_R = 0x60;     /* data lenght 8-bit, not parity bit, no FIFO */
           UART4_CTL_R = 0x301;     /* Enable UART4 module, Rx and Tx */
          // UART4_DR_R = 0;
           /* UART4 TX4 and RX4 use PK0 and PK1. Configure them digital and enable alternate function */
                   GPIO_PORTK_DEN_R    = 0x03;      /* set PK0 and PK1 as digital */
                   GPIO_PORTK_AFSEL_R = 0x03;    /* Use PK0,PK1 alternate function */
                   GPIO_PORTK_AMSEL_R  = 0;    /* Turn off analg function*/
                   GPIO_PORTK_PCTL_R = 0x00000011;     /* configure PK0 and PK1 for UART */
}

char Bluetooth_Read(void)
{
    char data;
      while((UART4_FR_R & (1<<4)) != 0); /* wait until Rx buffer is not full */
      //leerTeclado1();
    data = UART4_DR_R ;      /* before giving it another byte */
    return (unsigned char) data;
}

void Bluetooth_Write(unsigned char data)
{
    while((UART4_FR_R & (1<<5))!= 0); /* wait until Tx buffer not full */
    UART4_DR_R = data;                  /* before giving it another byte */
}

void Bluetooth_Write_String(char *str)
{
  while(*str)
    {
        Bluetooth_Write(*(str++));
    }
}

void Delay(unsigned long counter)
{
    unsigned long i = 0;

    for(i=0; i< counter; i++);
}
